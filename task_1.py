import utils
from utils import *

# Arguments available
def parse_args():
	parser = argparse.ArgumentParser(description='Task1')
	parser.add_argument('--image_path', type=str, default=None,
	                    help='Path to an image on which to apply task1 (absolute or relative path)')
	parser.add_argument('--save_path', type=str, default=None,
	                    help='Path where to save the output of the algorithm (absolute or relative path)')
	parser.add_argument('--path_dir', type=str, default="./dataset/images/classic/",
	                    help='Path to the directory where we want to apply task1 (absolute or relative path)')
	parser.add_argument('--save_dir', type=str, default='./dataset/predictions/classic/',
	                    help='Path where to save the directory where we want to apply task1 (absolute or relative path)')
	parser.add_argument('--no_file', type=str, default=None,
	                    help='Apply the algorithm on the image specified by this number, that is located on path_dir. The output is saved on save_dir location')
	parser.add_argument('--verbose', type=str, default='0',
	                    help='Print intermediate output from the algorithm. Choose 0/1')
	args = parser.parse_args()
	return args


# The entire logic behind Task1. 
def task1(image_path, save_path=None, verbose=0):
	# read the image
	image = cv2.imread(image_path)
	
	# convert the image to black and white
	image_black_and_white = utils.transform_to_black_and_white(image=image, ksize=55, C=21, k_blur=11, k_cross=9)
	
	# get the sudoku's number matrix image through a perpective transformation
	sudoku_image_only_numbers, _, = utils.split_lines_from_numbers(image_black_and_white=image_black_and_white, width=2000, height=2000) 
	
	# split the image into equal bounding boxes
	bboxes = utils.split_into_bboxes(image=sudoku_image_only_numbers)

	# extract the numbers in a matrix form
	solution = utils.extract_numbers_from_image(sudoku_image=sudoku_image_only_numbers, bboxes=bboxes, verbose=verbose)

	if verbose:
		print("####### Solution #########")
		for line in solution:
			print(line)
		utils.show_images(images_list=[image_black_and_white, sudoku_image_only_numbers], nrows=2, ncols=2)

	string_to_write_in_file = "\n".join(["".join(solution[row_idx]) for row_idx in range(len(solution))])

	if save_path != None and save_path != "":
		with open(save_path, "w+") as f:
			f.write(string_to_write_in_file)
		print("The output was saved at location: {}!".format(save_path))

	# return the solution generated by the underlying algorithm
	return solution, string_to_write_in_file


	
if __name__ == "__main__":
	args = parse_args()
	verbose = ord(args.verbose) - ord('0')

	if args.image_path != None:
		try:
			task1(image_path=args.image_path, save_path=args.save_path, verbose=verbose)
		except:
			raise Exception("An exception occured during the execution of task1!")

	else:
		os.makedirs(args.save_dir, exist_ok=True)
		
		if args.no_file != None:
			try:
				image_path = os.path.join(args.path_dir, "{}.jpg".format(args.no_file))
				save_path = os.path.join(args.save_dir, "{}_predicted.txt".format(args.no_file))
				print("Processing the image located at {}".format(image_path))
				task1(image_path=image_path,
				 	  verbose=verbose, 
				 	  save_path=save_path)
			except:
				raise Exception("An exception occured during the execution of task1 for the image located at: {}!".format(image_path))
		
		else:
			for no_file in range(1, 21):
				try:
					image_path = os.path.join(args.path_dir, "{}.jpg".format(no_file))
					save_path = os.path.join(args.save_dir, "{}_predicted.txt".format(no_file))
					print("Processing the image located at {}".format(image_path))
					task1(image_path=image_path,
				 	  	  verbose=verbose, 
				 	      save_path=save_path)
				except:
					raise Exception("An exception occured during the execution of task1 for the image located at: {}!".format(image_path))
	